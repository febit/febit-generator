<%

@import java.util.ArrayList;

var CONST;

var cfg_class_modifier;
var cfg_abstract;
var cfg_final;
var cfg_extends;
var cfg_class_interface = false;
var cfg_implements = ArrayList::new();
var cfg_annotations = ArrayList::new();
var cfg_docs = ArrayList::new();
var cfg_imports = ArrayList::new();

var initClassConfig = function(){
    cfg_class_modifier = "public";
    cfg_abstract = false;
    cfg_final = false;
    cfg_extends = null;
    cfg_implements.~clear();
    cfg_annotations.~clear();
    cfg_docs.~clear();
    cfg_imports.~clear();
};

// init at first
initClassConfig();

CONST.java_to_interface = function(){
    cfg_class_interface = true;
};

CONST.java_to_public = function(){
    cfg_class_modifier = "public";
};

CONST.java_to_protected = function(){
    cfg_class_modifier = "protected";
};

CONST.java_to_private = function(){
    cfg_class_modifier = "private";
};

CONST.java_abstract = function(flag){
    cfg_abstract = flag ? true : false;
};

CONST.java_final = function(flag){
    cfg_final = flag ? true : false;
};

CONST.java_imports = function(){
    list_adds(cfg_imports,arguments);
};

CONST.java_extends = function(classname){
    cfg_extends = classname;
};

CONST.java_impl = CONST.java_implements = function(){
    list_adds(cfg_implements, arguments);
};

CONST.java_annotations = CONST.java_anno = function(){
    list_adds(cfg_annotations,arguments);
};

var java_docs = 
CONST.java_docs = function(){
    list_adds(cfg_docs, arguments);
};


var writeClassBody = function(classname, classContent){

    cfg_imports = javaImportsCheck(cfg_imports, classname);
    java_docs("", "@author "+ author);

    writeCopyright();
%>
package ${getClassPackageName(classname)};
<%
for(aimport : cfg_imports){%>
import ${aimport};<%
}%>

/**<%for(doc : cfg_docs){%>
 * ${doc}<%}else{%>
 * <%}%>
 */
<%
    for(anno : cfg_annotations){
%>
@${anno}<%
    }%>
${cfg_class_modifier} ${cfg_abstract?"abstract ":null}${cfg_final?"final ":null}${cfg_class_interface?"interface":"class"} ${
    getClassSimpleName(classname)
}${
    cfg_extends?(" extends "+ cfg_extends):null
}${
    cfg_implements?" implements " + list_join(cfg_implements, ", ") :null
} {
${classContent}
}
<%
};//end writeClassBody

CONST.createPkg = function(name){
    createFolder(FT_JAVA, str_replace(name, ".", "/"));
};

CONST.writeJavaClass = function(cancel, classname, func_classContent){
    var content;
    if(!cancel){
        var classContent;
        func_classContent() => classContent;
        writeClassBody(classname, classContent) => content;
    }
    writeFile(FT_JAVA, "Java file", cancel, classname, content);
    initClassConfig();
};


//writeJavaPackageInfo
CONST.writeJavaPackageInfo = function(cancel, pkgname){
    var content;
    if(!cancel){
        {
            writeCopyright(); 
%>package ${pkgname};
<%
        }=>content;
    }
    writeFile(FT_JAVA, "Java package-info file", cancel, pkgname +".package-info", content);
};

%>
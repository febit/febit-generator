<%
var CONST;

@import java.util.List;
@import java.util.ArrayList;
@import webit.generator.core.util.CollectionUtil;
@import webit.generator.core.util.StringUtil;
@import webit.generator.core.util.ArraysUtil;
@import webit.generator.core.util.SQLUtil;
@import webit.generator.core.model.TableModel;
@import webit.generator.core.util.template.ContextUtil;
@import webit.generator.core.util.TemplateContextUtil;
@import webit.generator.core.util.ClassNameUtil;
@import webit.generator.core.Config;


//Global Functions
CONST.str_replace = native StringUtil.replace(String, String, String);
CONST.new_list = native new ArrayList();
CONST.list_size = native List.size();
CONST.list_clear = native List.clear();
CONST.list_add = native List.add(Object);

CONST.in_arr = native ArraysUtil.in(Object, Object[]);
CONST.list_adds = native CollectionUtil.adds(List, Object[]);
CONST.list_join = native StringUtil.join(Iterable, String);

CONST.upperFirst = native ClassNameUtil.upperFirst(String);
CONST.lowerFirst = native ClassNameUtil.lowerFirst(String);
CONST.getClassPackageName = native ClassNameUtil.getClassPackageName(String);
CONST.getClassSimpleName = native ClassNameUtil.getClassSimpleName(String);

CONST.javaImportsCheck = native ClassNameUtil.javaImportsCheck(List, String);
CONST.varNameToUpper = native ClassNameUtil.varNameToUpper(String);

CONST.tm_getColumnByName = native TableModel.getColumnByName(String);
CONST.tm_getFkColumnsByType = native TableModel.getFkColumnsByType(String);

CONST.isModuleActived = native Config.isModuleActived(String);

CONST.parseInt = native Integer.parseInt(String);

var saveToFile =
CONST.saveToFile = native TemplateContextUtil.saveToFile(boolean, int, String, Object);

var createFolder =
CONST.createFolder = native TemplateContextUtil.createFolder(int, String);

//writeFile
var writeFile = 
CONST.writeFile = function(fileType, fileTypeName, cancel, filename, content) {
    saveToFile(cancel, fileType, filename, content);
%>
=====================================
type: ${fileTypeName}
file name: ${filename}<%
    if(cancel){
%>
Canceled !!
<%
    }else{
        if(DEBUG){
%>
===> Source: 
${content}
===<
<%
        }
    }
%>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<%
};


//writeCopyright
CONST.writeCopyright = function(){
    echo COPY_RIGHT || "//Powered By XXX Team, Since 2014";
    echo '\n';
};


//writeBaseFile
CONST.writeBaseFile = function(cancel, filename, func_content){
    var content;
    if(!cancel){
        func_content() => content;
    }
    writeFile(FT_BASE, "Base file", cancel, filename, content);
};


//writeResourceFile
CONST.writeResourceFile = function(cancel, filename, func_content){
    var content;
    if(!cancel){
        func_content() => content;
    }
    writeFile(FT_RES, "Resource file", cancel, filename, content);
};


//writeWebFile
CONST.writeWebFile = function(cancel, filename, func_content){
    var content;
    if(!cancel){
        func_content() => content;
    }
    writeFile(FT_WEB, "Web file", cancel, filename, content);
};


%>
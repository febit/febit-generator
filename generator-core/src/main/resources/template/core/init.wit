<%
var CONST;

@import java.util.List;
@import java.util.ArrayList;
@import org.febit.util.StringUtil;
@import org.febit.generator.util.Arrays;
@import org.febit.generator.util.CommonUtil;
@import org.febit.generator.util.SQLUtil;
@import org.febit.generator.util.NamingUtil;
@import org.febit.generator.model.Table;
@import org.febit.generator.TemplateContext;
@import org.febit.generator.Config;


//Global Functions
CONST.str_replace = StringUtil::replace;
CONST.new_list = native new ArrayList();

CONST.in_arr = native Arrays.in(Object, Object[]);
CONST.list_adds = native CommonUtil.adds(List, Object[]);
CONST.list_join = StringUtil::join;

CONST.upperFirst = native NamingUtil.upperFirst(String);
CONST.lowerFirst = native NamingUtil.lowerFirst(String);

CONST.getClassPackageName = native NamingUtil.getClassPackageName(String);
CONST.getClassSimpleName = native NamingUtil.getClassSimpleName(String);

CONST.javaImportsCheck = native NamingUtil.javaImportsCheck(List, String);
CONST.varNameToUpper = native NamingUtil.varNameToUpper(String);

//Deprecated
CONST.tm_getColumnByName = native Table.getColumnByName(String);
CONST.tm_getFkColumnsByType = native Table.getFkColumnsByType(String);
CONST.toLowerCase = native String.toLowerCase();
CONST.toUpperCase = native String.toUpperCase();
CONST.list_size = native List.size();
CONST.list_contains = native List.contains(Object);
CONST.list_merge = native List.addAll(java.util.Collection);
CONST.list_clear = native List.clear();
CONST.list_add = native List.add(Object);

CONST.isModuleActived = Config::isModuleActived;

CONST.parseInt = Integer::parseInt;

var saveToFile =
CONST.saveToFile = TemplateContext::saveToFile;

var createFolder =
CONST.createFolder = TemplateContext::createFolder;

//writeFile
var writeFile = 
CONST.writeFile = function(fileType, fileTypeName, cancel, filename, content) {
    saveToFile(cancel, fileType, filename, content);
%>
=====================================
type: ${fileTypeName}
file name: ${filename}<%
    if(cancel){
%>
Canceled !!
<%
    }else{
        if(DEBUG){
%>
===> Source: 
${content}
===<
<%
        }
    }
%>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<%
};


//writeCopyright
CONST.writeCopyright = function(){
    echo COPY_RIGHT || "//Powered By XXX Team, Since 2014";
    echo '\n';
};


//writeBaseFile
CONST.writeBaseFile = function(cancel, filename, func_content){
    var content;
    if(!cancel){
        func_content() => content;
    }
    writeFile(FT_BASE, "Base file", cancel, filename, content);
};


//writeResourceFile
CONST.writeResourceFile = function(cancel, filename, func_content){
    var content;
    if(!cancel){
        func_content() => content;
    }
    writeFile(FT_RES, "Resource file", cancel, filename, content);
};


//writeWebFile
CONST.writeWebFile = function(cancel, filename, func_content){
    var content;
    if(!cancel){
        func_content() => content;
    }
    writeFile(FT_WEB, "Web file", cancel, filename, content);
};

/*
var JDBC_TYPES = {
    -7   : "BIT",
    -6   : "TINYINT",
    5    : "SMALLINT",
    4    : "INTEGER",
    -5   : "BIGINT",
    6    : "FLOAT",
    7    : "REAL",
    8    : "DOUBLE",
    2    : "NUMERIC",
    3    : "DECIMAL",
    1    : "CHAR",
    12   : "VARCHAR",
    -1   : "LONGVARCHAR",
    91   : "DATE",
    92   : "TIME",
    93   : "TIMESTAMP",
    -2   : "BINARY",
    -3   : "VARBINARY",
    -4   : "LONGVARBINARY",
    0    : "NULL",
    1111 : "OTHER",
    2000 : "JAVA_OBJECT",
    2001 : "DISTINCT",
    2002 : "STRUCT",
    2003 : "ARRAY",
    2004 : "BLOB",
    2005 : "CLOB",
    2006 : "REF",
    70   : "DATALINK",
    16   : "BOOLEAN",
    -8   : "ROWID",
    -15  : "NCHAR",
    -9   : "NVARCHAR",
    -16  : "LONGNVARCHAR",
    2011 : "NCLOB",
    2009 : "SQLXML"
};
*/

var _getJdbcTypeString = native org.febit.generator.util.dbaccess.DatabaseAccesser.getJdbcTypeString(int);
CONST.getJdbcTypeString = function(column){
    return _getJdbcTypeString(column.raw.type || -1);
};

%>